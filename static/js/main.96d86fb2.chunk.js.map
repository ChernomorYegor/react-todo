{"version":3,"sources":["AddTodo.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","addTodo","useState","value","setValue","onSubmit","e","preventDefault","className","type","placeholder","onChange","target","TodoItem","todo","removeTodo","text","onClick","bind","id","TodoList","todos","console","log","length","map","key","App","JSON","parse","window","localStorage","getItem","setTodos","useEffect","setItem","stringify","concat","idTodo","slice","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8KAoCeA,MAlCf,YAA+B,IAAZC,EAAW,EAAXA,QAAW,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAgB1B,OACI,0BAAMC,SAdV,SAAmBC,GACfA,EAAEC,iBAEY,KAAVJ,IACAF,EAAQE,GACRC,EAAS,OAUT,yBAAKI,UAAU,oBACX,2BACIA,UAAU,eACVC,KAAK,OACLC,YAAY,iBACZP,MAAOA,EACPQ,SAZhB,SAAqBL,GACjBF,EAASE,EAAEM,OAAOT,UAaV,yBAAKK,UAAU,sBACX,4BAAQA,UAAU,kBAAkBC,KAAK,UAAzC,WClBLI,MATf,YAAyC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACtB,OACI,yBAAKP,UAAU,aACVM,EAAKE,KACN,4BAAQR,UAAU,wBAAwBC,KAAK,SAASQ,QAASF,EAAWG,KAAK,KAAMJ,EAAKK,KAA5F,cCUGC,MAbf,YAA0C,IAAtBC,EAAqB,EAArBA,MAAON,EAAc,EAAdA,WAEvB,OADAO,QAAQC,IAAIF,GAER,yBAAKb,UAAU,aACX,wBAAIA,UAAU,QAAd,aACA,uBAAGA,UAAU,mBAAb,aAA0Ca,EAAMG,OAAhD,WAEIH,EAAMI,KAAI,SAAAX,GAAI,OAAI,kBAAC,EAAD,CAAUY,IAAKZ,EAAKK,GAAIL,KAAMA,EAAMC,WAAYA,SCuBnEY,MA5Bf,WACI,IADW,EAKezB,oBAFT,kBAAM0B,KAAKC,MAAMC,OAAOC,aAAaC,QAFxC,WAE2D,MAH9D,mBAKJX,EALI,KAKGY,EALH,KAoBX,OAbAC,qBAAW,WAAOJ,OAAOC,aAAaI,QANxB,QAMuCP,KAAKQ,UAAUf,MAAS,CAACA,IAc1E,yBAAKb,UAAU,OACX,kBAAC,EAAD,CAASP,QAbjB,SAAiBe,GACbiB,EAASZ,EAAMgB,OAAO,CAAC,CACnBlB,GAAIE,EAAMG,OAAS,EACnBR,KAAMA,SAWN,kBAAC,EAAD,CAAUK,MAAOA,EAAON,WAPhC,SAAoBuB,GAChBL,EAASZ,EAAMkB,QAAQC,QAAO,SAAA1B,GAAI,OAAIA,EAAKK,KAAOmB,WCVtCG,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.96d86fb2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction AddTodo({ addTodo }) {\n    const [value, setValue] = useState('');\n\n    function submitAdd(e) {\n        e.preventDefault();\n\n        if (value !== '') {\n            addTodo(value);\n            setValue('');\n        }\n    }\n\n    function changeValue(e) {\n        setValue(e.target.value);\n    }\n\n    return (\n        <form onSubmit={submitAdd}>\n            <div className=\"input-group mb-4\">\n                <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Enter new todo\"\n                    value={value}\n                    onChange={changeValue}\n                />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-primary\" type=\"submit\">Add</button>\n                </div>\n            </div>\n        </form>\n    );\n}\n\nexport default AddTodo;","import React from 'react';\n\nfunction TodoItem({ todo, removeTodo }) {\n    return (\n        <div className=\"todo-item\">\n            {todo.text}\n            <button className=\"btn btn-danger btn-sm\" type=\"button\" onClick={removeTodo.bind(null, todo.id)}>Complete</button>\n        </div>\n    );\n}\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from \"./TodoItem\";\n\nfunction TodoList({ todos, removeTodo }) {\n    console.log(todos);\n    return (\n        <div className=\"todo-list\">\n            <h4 className=\"mb-1\">Todo List</h4>\n            <p className=\"text-right mb-0\">There are {todos.length} todos.</p>\n            {\n                todos.map(todo => <TodoItem key={todo.id} todo={todo} removeTodo={removeTodo} />)\n            }\n        </div>\n    );\n}\n\nexport default TodoList;","import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport AddTodo from \"./AddTodo\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n    const TODOS = 'TODOS';\n\n    const initTodo = () => JSON.parse(window.localStorage.getItem(TODOS)) || [];\n\n    const [todos, setTodos] = useState(initTodo);\n\n    useEffect( () => {window.localStorage.setItem(TODOS, JSON.stringify(todos))},[todos]);\n\n    function addTodo(text) {\n        setTodos(todos.concat([{\n            id: todos.length + 1,\n            text: text\n        }]));\n    }\n\n    function removeTodo(idTodo) {\n        setTodos(todos.slice().filter(todo => todo.id !== idTodo));\n    }\n\n    return (\n        <div className=\"app\">\n            <AddTodo addTodo={addTodo} />\n            <TodoList todos={todos} removeTodo={removeTodo} />\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}